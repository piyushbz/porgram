/*Single Element in a Sorted Array
Given a sorted array of integers A where every element appears twice except for one element which appears once,
find and return this single element that appears only once.
Output Format
Return the single element that appears only once.
Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9 
For Example
Input 1:
    A = [1, 1, 2, 2, 3]
Output 1:
    3
Input 2:
    A = [5, 11, 11, 100, 100]
Output 2:
    5
*/


int Solution::solve(vector<int> &A) {
    int last=A.size()-1;
    int n=A.size()-1;
    int first=0;
    int mid=((last-first)/2)+first;
    if (last==0) return A[0];
    while (first<=last and mid>=0 and mid<=n)
    {
        if (mid==n) return A[mid];
        else if (mid==0) return A[mid];
        else if (((A[mid]!=A[mid-1])&&(A[mid]!=A[mid+1]))) return A[mid];
        else if (((A[mid]==A[mid-1])&&(mid%2==0))||((A[mid]==A[mid+1])&&(mid%2!=0)))
        {
            last=mid-1;
            mid=((last-first)/2)+first;
        }
        else
        {
            first=mid+1;
            mid=((last-first)/2)+first;
        }
    }
}
